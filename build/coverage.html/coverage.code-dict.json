{"/home/travis/build/npmtest/node-npmtest-pickup/test.js":"/* istanbul instrument in package npmtest_pickup */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pickup/lib.npmtest_pickup.js":"/* istanbul instrument in package npmtest_pickup */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pickup = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pickup = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pickup/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pickup && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pickup */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pickup\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pickup.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_pickup.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pickup.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_pickup.__dirname + '/lib.npmtest_pickup.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pickup/node_modules/pickup/index.js":"'use strict'\n\n// pickup - transform RSS or Atom XML to JSON\n\nexports = module.exports = Pickup\n\nconst StringDecoder = require('string_decoder').StringDecoder\nconst attribute = require('./lib/attribute')\nconst mappings = require('./lib/mappings')\nconst os = require('os')\nconst sax = require('sax')\nconst stream = require('readable-stream')\nconst util = require('util')\n\nfunction OpenHandlers (t) {\n  this.channel = t.feedopen\n  this.feed = t.feedopen\n  this.item = t.entryopen\n  this.entry = t.entryopen\n  this.image = t.imageopen\n}\n\nfunction CloseHandlers (t) {\n  this.channel = t.feedclose\n  this.feed = t.feedclose\n  this.item = t.entryclose\n  this.entry = t.entryclose\n  this.image = t.imageclose\n}\n\nfunction Opts (trim, normalize, position) {\n  this.trim = trim\n  this.normalize = normalize\n  this.position = position\n}\n\nconst saxOpts = new Opts(true, true, false)\n\nfunction encodingFromString (str) {\n  if (str.match(/utf-8/i)) {\n    return 'utf8'\n  } else if (str.match(/iso-8859-1/i)) {\n    return 'binary'\n  }\n  return 'utf8'\n}\n\nfunction encodingFromOpts (opts) {\n  const str = opts ? opts.charset : null\n  if (typeof str !== 'string') return null\n  return encodingFromString(str)\n}\n\nutil.inherits(Pickup, stream.Transform)\nfunction Pickup (opts) {\n  if (!(this instanceof Pickup)) return new Pickup(opts)\n  stream.Transform.call(this, opts)\n\n  if (!Pickup.openHandlers) {\n    Pickup.openHandlers = new OpenHandlers(Pickup.prototype)\n    Pickup.closeHandlers = new CloseHandlers(Pickup.prototype)\n  }\n\n  this.encoding = encodingFromOpts(opts)\n  this.decoder = new StringDecoder(this.encoding)\n\n  this.eventMode = opts && opts.eventMode\n  this.map = null\n  this.parser = sax.parser(true, saxOpts)\n  this.state = new State()\n\n  const parser = this.parser\n\n  parser.ontext = (t) => {\n    const current = this.current()\n    const map = this.map\n    const state = this.state\n    const name = this.state.name\n\n    if (!current || !map) return\n\n    let key = map.get(name)\n    if (state.image && name === 'url') key = 'image'\n\n    const isSet = current[key] !== undefined\n    const isSummary = key === 'summary' && (\n      name === 'summary' || name === 'itunes:summary'\n    )\n    if (key === undefined || (isSet && !isSummary)) return\n\n    current[key] = t\n  }\n\n  parser.oncdata = (d) => {\n    parser.ontext(d)\n  }\n\n  const handle = (name, handlers) => {\n    if (handlers.hasOwnProperty(name)) {\n      handlers[name].apply(this)\n    }\n  }\n  parser.onopentag = (node) => {\n    const name = node.name\n    this.state.name = name\n    this.map = mappings[name] || this.map\n    handle(name, Pickup.openHandlers)\n    const current = this.current()\n    if (current) {\n      const key = this.map.get(name)\n      if (key) {\n        const attributes = node.attributes\n        const keys = Object.keys(attributes)\n        if (keys.length) {\n          const kv = attribute(key, attributes, current)\n          if (kv) {\n            current[kv[0]] = kv[1]\n          }\n        }\n      }\n    }\n  }\n\n  parser.onclosetag = (name) => {\n    handle(name, Pickup.closeHandlers)\n    this.state.name = null\n  }\n}\n\nPickup.prototype.current = function () {\n  return this.state.entry || this.state.feed\n}\n\nPickup.prototype.objectMode = function () {\n  return this._readableState.objectMode\n}\n\nPickup.prototype.feedopen = function () {\n  this.state.feed = new Feed()\n}\n\nPickup.prototype.entryopen = function () {\n  this.state.entry = new Entry()\n}\n\nPickup.prototype.imageopen = function () {\n  this.state.image = true\n}\n\nPickup.prototype.entryclose = function () {\n  const entry = this.state.entry\n  if (!this.eventMode) {\n    if (this.objectMode()) {\n      this.push(entry)\n    } else {\n      this.push(JSON.stringify(entry) + os.EOL)\n    }\n  } else {\n    this.emit('entry', entry)\n  }\n  this.state.entry = null\n}\n\nPickup.prototype.feedclose = function () {\n  const feed = this.state.feed\n  if (!this.eventMode) {\n    if (this.objectMode()) {\n      this.push(feed)\n    } else {\n      this.push(JSON.stringify(feed) + os.EOL)\n    }\n  } else {\n    this.emit('feed', feed)\n  }\n  this.state.feed = null\n}\n\nPickup.prototype.imageclose = function () {\n  this.state.image = false\n}\n\nfunction free (parser) {\n  parser.oncdata = null\n  parser.onclosetag = null\n  parser.onopentag = null\n  parser.ontext = null\n}\n\nPickup.prototype._flush = function (cb) {\n  free(this.parser)\n  this.parser.close()\n\n  this._decoder = null\n\n  this.encoding = null\n  this.map = null\n  this.parser = null\n\n  this.state.deinit()\n  this.state = null\n\n  cb()\n}\n\nfunction cribEncoding (str) {\n  const enc = str.split('encoding')[1]\n  const def = 'utf8'\n  if (!enc) return def\n  if (enc.trim()[0] === '=') {\n    return encodingFromString(enc)\n  }\n  return def\n}\n\nPickup.prototype._transform = function (chunk, enc, cb) {\n  if (!this._decoder) {\n    if (!this.encoding) {\n      // This, of course, fails--yielding 'utf8'--if the first chunk is too\n      // short to contain the encoding tag.\n      const t = chunk.toString('ascii', 0, 128)\n      this.encoding = cribEncoding(t)\n    }\n    this.emit('encoding', this.encoding)\n  }\n  const str = this.decoder.write(chunk)\n  const er = this.parser.write(str).error\n  this.parser.error = null\n  cb(er)\n}\n\nfunction Entry (\n  author\n, duration\n, enclosure\n, id\n, image\n, link\n, originalURL\n, subtitle\n, summary\n, title\n, updated\n, url) {\n  this.author = author\n  this.duration = duration\n  this.enclosure = enclosure\n  this.feed = feed\n  this.id = id\n  this.image = image\n  this.link = link\n  this.originalURL = originalURL\n  this.subtitle = subtitle\n  this.summary = summary\n  this.title = title\n  this.updated = updated\n  this.url = url\n}\n\nfunction Feed (\n  author\n, copyright\n, id\n, image\n, language\n, link\n, originalURL\n, payment\n, subtitle\n, summary\n, title\n, ttl\n, updated\n, url) {\n  this.author = author\n  this.copyright = copyright\n  this.id = id\n  this.image = image\n  this.language = language\n  this.link = link\n  this.originalURL = originalURL\n  this.payment = payment\n  this.subtitle = subtitle\n  this.summary = summary\n  this.title = title\n  this.ttl = ttl\n  this.updated = updated\n  this.url = url\n}\n\nfunction State (entry, feed, image, name) {\n  this.entry = entry\n  this.feed = feed\n  this.image = image\n  this.name = name\n}\n\nState.prototype.deinit = function () {\n  this.entry = null\n  this.feed = null\n  this.image = false\n  this.name = undefined // String()\n}\n\nfunction extend (origin, add) {\n  return util._extend(origin, add || Object.create(null))\n}\nfunction entry (obj) {\n  return extend(new Entry(), obj)\n}\nfunction feed (obj) {\n  return extend(new Feed(), obj)\n}\n\nif (process.mainModule.filename.match(/test/) !== null) {\n  exports.cribEncoding = cribEncoding\n  exports.entry = entry\n  exports.feed = feed\n  exports.EVENTS = [\n    'data',\n    'drain',\n    'readable',\n    'end',\n    'entry',\n    'error',\n    'feed',\n    'finish'\n  ]\n}\n","/home/travis/build/npmtest/node-npmtest-pickup/node_modules/pickup/lib/attribute.js":"'use-strict'\n\n// attribute - whitelist attributes\n\nmodule.exports = attribute\n\nfunction href (attributes) {\n  return attributes.href || attributes.url\n}\n\nfunction Enclosure (attributes) {\n  this.url = href(attributes)\n  this.length = attributes.length\n  this.type = attributes.type\n}\nfunction enclosure (key, attributes) {\n  return [key, new Enclosure(attributes)]\n}\n\nfunction link (key, attributes) {\n  const rel = attributes.rel\n  if (key === 'enclosure' || rel === 'enclosure') {\n    return enclosure('enclosure', attributes)\n  }\n  if (rel && rel !== 'alternate' && rel !== 'payment') return\n  if (rel === 'payment') key = rel\n  if (key === 'link' || key === 'payment') {\n    const uri = href(attributes)\n    return [key, uri]\n  }\n}\n\nfunction image (key, attributes) {\n  return [key, href(attributes)]\n}\n\nconst handlers = {\n  link: link,\n  image: image,\n  enclosure: enclosure\n}\n\nfunction attribute (key, attributes) {\n  if (handlers.hasOwnProperty(key)) {\n    return handlers[key](key, attributes)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-pickup/node_modules/pickup/lib/mappings.js":"'use strict'\n\n// mappings - map elements to property names\n\nmodule.exports = {\n  channel: new Map([\n    ['atom:link', 'link'],\n    ['copyright', 'copyright'],\n    ['description', 'summary'],\n    ['image', 'image'],\n    ['itunes:author', 'author'],\n    ['itunes:image', 'image'],\n    ['itunes:subtitle', 'subtitle'],\n    ['itunes:summary', 'summary'],\n    ['language', 'language'],\n    ['link', 'link'],\n    ['pubDate', 'updated'],\n    ['title', 'title'],\n    ['ttl', 'ttl']\n  ]),\n  item: new Map([\n    ['author', 'author'],\n    ['description', 'summary'],\n    ['enclosure', 'enclosure'],\n    ['guid', 'id'],\n    ['itunes:author', 'author'],\n    ['itunes:duration', 'duration'],\n    ['itunes:image', 'image'],\n    ['itunes:subtitle', 'subtitle'],\n    ['itunes:summary', 'summary'],\n    ['link', 'link'],\n    ['media:thumbnail', 'image'],\n    ['pubDate', 'updated'],\n    ['title', 'title']\n  ]),\n  feed: new Map([\n    ['id', 'id'],\n    ['link', 'link'],\n    ['name', 'author'],\n    ['subtitle', 'subtitle'],\n    ['title', 'title'],\n    ['updated', 'updated']\n  ]),\n  entry: new Map([\n    ['email', 'author'],\n    ['id', 'id'],\n    ['link', 'link'],\n    ['summary', 'summary'],\n    ['title', 'title'],\n    ['updated', 'updated']\n  ])\n}\n","/home/travis/build/npmtest/node-npmtest-pickup/node_modules/pickup/repl.js":"#!/usr/bin/env node\n\n// repl - explore pickup\n\nconst Transform = require('stream').Transform\nconst fs = require('fs')\nconst http = require('http')\nconst pickup = require('./')\nconst repl = require('repl')\nconst util = require('util')\n\nconst ctx = repl.start({\n  prompt: 'pickup> ',\n  ignoreUndefined: true,\n  input: process.stdin,\n  output: process.stdout\n}).context\n\nctx.file = file\nctx.get = get\nctx.read = read\n\nfunction file (path) {\n  return fs.createReadStream(path).pipe(\n    pickup({ objectMode: true }))\n}\n\nutil.inherits(UrlStream, Transform)\nfunction UrlStream (opts) {\n  if (!(this instanceof UrlStream)) return new UrlStream(opts)\n  Transform.call(this, opts)\n}\n\nUrlStream.prototype._transform = function (chunk, enc, cb) {\n  http.get(chunk, (res) => {\n    const parser = pickup({ objectMode: true })\n    parser.on('data', (chunk) => {\n      this.push(chunk)\n    })\n    parser.on('finish', cb)\n    res.pipe(parser)\n  })\n}\n\nfunction get (url) {\n  const stream = new UrlStream({ objectMode: true })\n  stream.end(url)\n  return stream\n}\n\nfunction read (stream, prop) {\n  let obj\n  while ((obj = stream.read()) !== null) {\n    console.log(util.inspect(\n      prop ? obj[prop] : obj, { colors: true }))\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-pickup/node_modules/pickup/bin/cli.js":"#!/usr/bin/env node\n\nconst pickup = require('../')\n\nprocess.stdout.on('error', function () {})\nprocess.stdin.pipe(pickup()).pipe(process.stdout)\n"}